Fine Techniques :
	day 13-14 : Feb 20 2021
	
find the biggest number in a sequence(array):
	what is the # of comparisons : n - 1
	
	
There is a tournament. This has n players. How many matches should be staged
to find the champion?
	require n - 1 matches
	each match eliminates one player
	we have to eliminate n - 1 players
	
geometric progression : a ar ar^2 ar^3 ar^(n-1)
if r < 1
	sum is bounded by  c * a for some constant c
if r > 1
	sum is bounded by c * last term


find the second biggest in a sequence(array) - all elements are distinct
- find the biggest : n - 1 comparisons
- find the second biggest : n - 2 comparisons
  total : 2n - 3
  always 2n - 3? worst case : 2n - 3?

// sequence is not empty 
algo find_biggest(a[0 .. n - 1])
	max <- a[0] 
	for i <- 1 to n do
		if a[i] > max then
			max <- a[i]
	return max
	
// second biggest
// sequence has at least 2 elements
// worst case : # of comparisons : 2n - 3
algo find_second_biggest(a[0 .. n-1])
	max1 <- a[0]
	max2 <- a[1]
	if max2 > max1 then
		swap(max1, max2)
	for i <- 2 to n-1 then
		if a[i] > max1 then
			max2 <- max1
			max1 <- a[i]
		else if a[i] > max2 then
			max2 <- a[i]
best case:	
	1 + (n - 2) * 1 => n - 1 comparison
	ascending order
worst case :
	1 + (n - 2) * 2 => 2n - 3 comparison
	....
	
-----------------
find the # which is neither the smallest nor the greatest?
- const time
- examine 3 elements

---------------------

binary counter : Stepanov
second biggest : n + log n - 2 
				extra space (log n)^ 2
				
series of videos : Stepanov
Programming conversations:
	youtube or channel A9
					
			

 
  
  
